/* automatically generated by rust-bindgen 0.58.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]


pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ESP_AUDIO_SAMPLE_RATE_8K: u32 = 8000;
pub const ESP_AUDIO_SAMPLE_RATE_11K: u32 = 11025;
pub const ESP_AUDIO_SAMPLE_RATE_12K: u32 = 12000;
pub const ESP_AUDIO_SAMPLE_RATE_16K: u32 = 16000;
pub const ESP_AUDIO_SAMPLE_RATE_22K: u32 = 22050;
pub const ESP_AUDIO_SAMPLE_RATE_24K: u32 = 24000;
pub const ESP_AUDIO_SAMPLE_RATE_32K: u32 = 32000;
pub const ESP_AUDIO_SAMPLE_RATE_44K: u32 = 44100;
pub const ESP_AUDIO_SAMPLE_RATE_48K: u32 = 48000;
pub const ESP_AUDIO_SAMPLE_RATE_64K: u32 = 64000;
pub const ESP_AUDIO_SAMPLE_RATE_88K: u32 = 88200;
pub const ESP_AUDIO_SAMPLE_RATE_96K: u32 = 96000;
pub const ESP_AUDIO_BIT8: u32 = 8;
pub const ESP_AUDIO_BIT16: u32 = 16;
pub const ESP_AUDIO_BIT24: u32 = 24;
pub const ESP_AUDIO_BIT32: u32 = 32;
pub const ESP_AUDIO_MONO: u32 = 1;
pub const ESP_AUDIO_DUAL: u32 = 2;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const esp_audio_type_t_ESP_AUDIO_TYPE_UNSUPPORT: esp_audio_type_t = 0;
pub const esp_audio_type_t_ESP_AUDIO_TYPE_AMRNB: esp_audio_type_t = 1;
pub const esp_audio_type_t_ESP_AUDIO_TYPE_AMRWB: esp_audio_type_t = 2;
pub const esp_audio_type_t_ESP_AUDIO_TYPE_AAC: esp_audio_type_t = 3;
pub const esp_audio_type_t_ESP_AUDIO_TYPE_G711A: esp_audio_type_t = 4;
pub const esp_audio_type_t_ESP_AUDIO_TYPE_G711U: esp_audio_type_t = 5;
pub const esp_audio_type_t_ESP_AUDIO_TYPE_OPUS: esp_audio_type_t = 6;
pub const esp_audio_type_t_ESP_AUDIO_TYPE_ADPCM: esp_audio_type_t = 7;
pub const esp_audio_type_t_ESP_AUDIO_TYPE_PCM: esp_audio_type_t = 8;
pub const esp_audio_type_t_ESP_AUDIO_TYPE_FLAC: esp_audio_type_t = 9;
pub const esp_audio_type_t_ESP_AUDIO_TYPE_VORBIS: esp_audio_type_t = 10;
pub const esp_audio_type_t_ESP_AUDIO_TYPE_MP3: esp_audio_type_t = 11;
pub const esp_audio_type_t_ESP_AUDIO_TYPE_MAX: esp_audio_type_t = 12;
#[doc = " @brief     Audio codec type"]
pub type esp_audio_type_t = ::std::os::raw::c_uint;
#[doc = "< Continue"]
pub const esp_audio_err_t_ESP_AUDIO_ERR_CONTINUE: esp_audio_err_t = 1;
#[doc = "< Success"]
pub const esp_audio_err_t_ESP_AUDIO_ERR_OK: esp_audio_err_t = 0;
#[doc = "< Fail"]
pub const esp_audio_err_t_ESP_AUDIO_ERR_FAIL: esp_audio_err_t = -1;
#[doc = "< Fail to malloc memory"]
pub const esp_audio_err_t_ESP_AUDIO_ERR_MEM_LACK: esp_audio_err_t = -2;
#[doc = "< Data is not enough"]
pub const esp_audio_err_t_ESP_AUDIO_ERR_DATA_LACK: esp_audio_err_t = -3;
#[doc = "< Parse header happened error."]
pub const esp_audio_err_t_ESP_AUDIO_ERR_HEADER_PARSE: esp_audio_err_t = -4;
#[doc = "< Input invalid parameter"]
pub const esp_audio_err_t_ESP_AUDIO_ERR_INVALID_PARAMETER: esp_audio_err_t = -5;
#[doc = "< Audio library is already exist"]
pub const esp_audio_err_t_ESP_AUDIO_ERR_ALREADY_EXIST: esp_audio_err_t = -6;
#[doc = "< Not support type"]
pub const esp_audio_err_t_ESP_AUDIO_ERR_NOT_SUPPORT: esp_audio_err_t = -7;
#[doc = " @brief      Audio codec error type definition"]
pub type esp_audio_err_t = ::std::os::raw::c_int;
#[doc = " @brief      Audio encoder infomation"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_audio_enc_info_t {
    #[doc = "< The sample rate of audio."]
    pub sample_rate: u32,
    #[doc = "< The channel number of audio."]
    pub channel: u8,
    #[doc = "< The bit per sample of audio"]
    pub bit_per_sample: u8,
    #[doc = "< The bit rate of audio"]
    pub bitrate: u32,
}
#[test]
fn bindgen_test_layout_esp_audio_enc_info_t() {
    assert_eq!(
        ::std::mem::size_of::<esp_audio_enc_info_t>(),
        12usize,
        concat!("Size of: ", stringify!(esp_audio_enc_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<esp_audio_enc_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(esp_audio_enc_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_audio_enc_info_t>())).sample_rate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_info_t),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_audio_enc_info_t>())).channel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_info_t),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_audio_enc_info_t>())).bit_per_sample as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_info_t),
            "::",
            stringify!(bit_per_sample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_audio_enc_info_t>())).bitrate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_info_t),
            "::",
            stringify!(bitrate)
        )
    );
}
#[doc = " @brief      Audio encoder input frame structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_audio_enc_in_frame_t {
    #[doc = "< Input data buffer which user can allocate times of input frame size."]
    pub buffer: *mut u8,
    #[doc = "< It is an input parameter and is one or several times of input frame size"]
    #[doc = "which is get from 'esp_xxx_enc_get_frame_size'."]
    pub len: u32,
}
#[test]
fn bindgen_test_layout_esp_audio_enc_in_frame_t() {
    assert_eq!(
        ::std::mem::size_of::<esp_audio_enc_in_frame_t>(),
        16usize,
        concat!("Size of: ", stringify!(esp_audio_enc_in_frame_t))
    );
    assert_eq!(
        ::std::mem::align_of::<esp_audio_enc_in_frame_t>(),
        8usize,
        concat!("Alignment of ", stringify!(esp_audio_enc_in_frame_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_audio_enc_in_frame_t>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_in_frame_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_audio_enc_in_frame_t>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_in_frame_t),
            "::",
            stringify!(len)
        )
    );
}
#[doc = " @brief      Audio encoder output frame structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_audio_enc_out_frame_t {
    #[doc = "< Output data buffer which user can allocate times of output frame size."]
    pub buffer: *mut u8,
    #[doc = "< It is an input parameter and is one or several times of output frame size"]
    #[doc = "which is get from 'esp_xxx_enc_get_frame_size'."]
    pub len: u32,
    #[doc = "< It is an output parameter which means encoded data length."]
    pub encoded_bytes: u32,
    #[doc = "< Presentation time stamp(PTS) calculated from accumulated input raw frame unit ms."]
    pub pts: u64,
}
#[test]
fn bindgen_test_layout_esp_audio_enc_out_frame_t() {
    assert_eq!(
        ::std::mem::size_of::<esp_audio_enc_out_frame_t>(),
        24usize,
        concat!("Size of: ", stringify!(esp_audio_enc_out_frame_t))
    );
    assert_eq!(
        ::std::mem::align_of::<esp_audio_enc_out_frame_t>(),
        8usize,
        concat!("Alignment of ", stringify!(esp_audio_enc_out_frame_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_audio_enc_out_frame_t>())).buffer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_out_frame_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_audio_enc_out_frame_t>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_out_frame_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_audio_enc_out_frame_t>())).encoded_bytes as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_out_frame_t),
            "::",
            stringify!(encoded_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_audio_enc_out_frame_t>())).pts as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_out_frame_t),
            "::",
            stringify!(pts)
        )
    );
}
#[doc = " @brief    Encoder configuration."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_audio_enc_config_t {
    #[doc = "< Audio encoder type which from 'esp_audio_type_t'."]
    pub type_: esp_audio_type_t,
    #[doc = "< Audio encoder configuration. For example, if choose AAC encoder,"]
    #[doc = "user need to config 'esp_aac_enc_config_t' and set the pointer"]
    #[doc = "of this configuration to 'cfg'."]
    pub cfg: *mut ::std::os::raw::c_void,
    #[doc = "< Size of \"cfg\". For example, if choose AAC encoder, the 'cfg_sz'"]
    #[doc = "is sizeof 'esp_aac_enc_config_t'"]
    pub cfg_sz: u32,
}
#[test]
fn bindgen_test_layout_esp_audio_enc_config_t() {
    assert_eq!(
        ::std::mem::size_of::<esp_audio_enc_config_t>(),
        24usize,
        concat!("Size of: ", stringify!(esp_audio_enc_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<esp_audio_enc_config_t>(),
        8usize,
        concat!("Alignment of ", stringify!(esp_audio_enc_config_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_audio_enc_config_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_config_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_audio_enc_config_t>())).cfg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_config_t),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_audio_enc_config_t>())).cfg_sz as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_config_t),
            "::",
            stringify!(cfg_sz)
        )
    );
}
#[doc = " @brief      AAC Encoder configurations"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_aac_enc_config_t {
    #[doc = "< Support sample rate(Hz) : 96000, 88200, 64000, 48000,"]
    #[doc = "44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000"]
    pub sample_rate: ::std::os::raw::c_int,
    #[doc = "< Support channel : mono, dual"]
    pub channel: ::std::os::raw::c_int,
    #[doc = "< Support bit per sample : 16 bit"]
    pub bit_per_sample: ::std::os::raw::c_int,
    #[doc = "< Support bitrate(bps) range on mono stream :"]
    #[doc = "|samplerate(Hz)|bitrate range(Kbps)|"]
    #[doc = "|    8000      |    12 - 48        |"]
    #[doc = "|    11025     |    18 - 66        |"]
    #[doc = "|    12000     |    20 - 72        |"]
    #[doc = "|    16000     |    22 - 96        |"]
    #[doc = "|    22050     |    25 - 132       |"]
    #[doc = "|    24000     |    31 - 144       |"]
    #[doc = "|    32000     |    33 - 160       |"]
    #[doc = "|    44100     |    57 - 160       |"]
    #[doc = "|    48000     |    59 - 160       |"]
    #[doc = "|    64000     |    65 - 160       |"]
    #[doc = "|    88200     |    67 - 160       |"]
    #[doc = "|    96000     |    70 - 160       |"]
    #[doc = "Note : 1) This table shows the bitrate range corresponding to each samplerate."]
    #[doc = "2) The bitrate range of dual stream is twice that of mono."]
    pub bitrate: ::std::os::raw::c_int,
    #[doc = "< Whether write ADTS header, true means add ADTS header, false means raw aac data."]
    pub adts_used: bool,
}
#[test]
fn bindgen_test_layout_esp_aac_enc_config_t() {
    assert_eq!(
        ::std::mem::size_of::<esp_aac_enc_config_t>(),
        20usize,
        concat!("Size of: ", stringify!(esp_aac_enc_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<esp_aac_enc_config_t>(),
        4usize,
        concat!("Alignment of ", stringify!(esp_aac_enc_config_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_aac_enc_config_t>())).sample_rate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_aac_enc_config_t),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_aac_enc_config_t>())).channel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_aac_enc_config_t),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_aac_enc_config_t>())).bit_per_sample as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_aac_enc_config_t),
            "::",
            stringify!(bit_per_sample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_aac_enc_config_t>())).bitrate as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_aac_enc_config_t),
            "::",
            stringify!(bitrate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_aac_enc_config_t>())).adts_used as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_aac_enc_config_t),
            "::",
            stringify!(adts_used)
        )
    );
}
extern "C" {
    #[doc = " @brief       Create AAC encoder handle through encoder configuration."]
    #[doc = ""]
    #[doc = " @param[in]   cfg      AAC encoder configuration."]
    #[doc = " @param[in]   cfg_sz   Size of \"esp_aac_enc_config_t\"."]
    #[doc = " @param[out]  enc_hd   The AAC encoder handle. If AAC encoder handle allocation failed, will be set to NULL."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_FAIL: Encoder initialize failed"]
    #[doc = "       - ESP_AUDIO_ERR_MEM_LACK: Fail to allocate memory"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_aac_enc_open(
        cfg: *mut ::std::os::raw::c_void,
        cfg_sz: u32,
        enc_hd: *mut *mut ::std::os::raw::c_void,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief       Get the input PCM data length and recommended output buffer length needed by encoding one frame."]
    #[doc = ""]
    #[doc = " @param[in]   enc_hd     The AAC encoder handle."]
    #[doc = " @param[out]  in_size    The input frame size."]
    #[doc = " @param[out]  out_size   The output frame size."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_aac_enc_get_frame_size(
        enc_hd: *mut ::std::os::raw::c_void,
        in_size: *mut ::std::os::raw::c_int,
        out_size: *mut ::std::os::raw::c_int,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief     Encode one or multi AAC frame which the frame num is depended on input data length."]
    #[doc = ""]
    #[doc = " @param[in]      enc_hd      The AAC encoder handle."]
    #[doc = " @param[in]      in_frame    Pointer to input data frame."]
    #[doc = " @param[in/out]  out_frame   Pointer to output data frame."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_FAIL: Encode error"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_aac_enc_process(
        enc_hd: *mut ::std::os::raw::c_void,
        in_frame: *mut esp_audio_enc_in_frame_t,
        out_frame: *mut esp_audio_enc_out_frame_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Get AAC encoder information from encoder handle."]
    #[doc = ""]
    #[doc = " @param[in]  enc_hd       The AAC encoder handle."]
    #[doc = " @param[in]  enc_info     The AAC encoder information."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_aac_enc_get_info(
        enc_hd: *mut ::std::os::raw::c_void,
        enc_info: *mut esp_audio_enc_info_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Deinitialize AAC encoder handle."]
    #[doc = ""]
    #[doc = " @param[in]  enc_hd    The AAC encoder handle."]
    pub fn esp_aac_enc_close(enc_hd: *mut ::std::os::raw::c_void);
}
#[doc = " @brief      ADPCM Encoder configurations"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_adpcm_enc_config_t {
    #[doc = "< The sample rate of audio"]
    pub sample_rate: ::std::os::raw::c_int,
    #[doc = "< The channel num of audio"]
    pub channel: ::std::os::raw::c_int,
    #[doc = "< The bit per sample of audio. Only support 16 bit"]
    pub bit_per_sample: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_esp_adpcm_enc_config_t() {
    assert_eq!(
        ::std::mem::size_of::<esp_adpcm_enc_config_t>(),
        12usize,
        concat!("Size of: ", stringify!(esp_adpcm_enc_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<esp_adpcm_enc_config_t>(),
        4usize,
        concat!("Alignment of ", stringify!(esp_adpcm_enc_config_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_adpcm_enc_config_t>())).sample_rate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_adpcm_enc_config_t),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_adpcm_enc_config_t>())).channel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_adpcm_enc_config_t),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_adpcm_enc_config_t>())).bit_per_sample as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_adpcm_enc_config_t),
            "::",
            stringify!(bit_per_sample)
        )
    );
}
extern "C" {
    #[doc = " @brief       Create ADPCM encoder handle through encoder configuration."]
    #[doc = ""]
    #[doc = " @param[in]   cfg      ADPCM encoder configuration."]
    #[doc = " @param[in]   cfg_sz   Size of \"esp_adpcm_enc_config_t\"."]
    #[doc = " @param[out]  enc_hd   The ADPCM encoder handle. If ADPCM encoder handle allocation failed, will be set to NULL."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_FAIL: Encoder initialize failed"]
    #[doc = "       - ESP_AUDIO_ERR_MEM_LACK: Fail to allocate memory"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_adpcm_enc_open(
        cfg: *mut ::std::os::raw::c_void,
        cfg_sz: u32,
        enc_hd: *mut *mut ::std::os::raw::c_void,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief       Get the input PCM data length and recommended output buffer length needed by encoding one frame."]
    #[doc = ""]
    #[doc = " @param[in]   enc_hd      The ADPCM encoder handle."]
    #[doc = " @param[out]  in_size     The input frame size."]
    #[doc = " @param[out]  out_size    The output frame size."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_adpcm_enc_get_frame_size(
        enc_hd: *mut ::std::os::raw::c_void,
        in_size: *mut ::std::os::raw::c_int,
        out_size: *mut ::std::os::raw::c_int,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief          Encode one or multi ADPCM frame which the frame num is depended on input data length."]
    #[doc = ""]
    #[doc = " @param[in]      enc_hd      The ADPCM encoder handle."]
    #[doc = " @param[in]      in_frame    Pointer to input data frame."]
    #[doc = " @param[in/out]  out_frame   Pointer to output data frame."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_FAIL: Encode error"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_adpcm_enc_process(
        enc_hd: *mut ::std::os::raw::c_void,
        in_frame: *mut esp_audio_enc_in_frame_t,
        out_frame: *mut esp_audio_enc_out_frame_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Get ADPCM encoder information from encoder handle."]
    #[doc = ""]
    #[doc = " @param[in]  enc_hd      The ADPCM encoder handle."]
    #[doc = " @param[in]  enc_info    The ADPCM encoder information."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_adpcm_enc_get_info(
        enc_hd: *mut ::std::os::raw::c_void,
        enc_info: *mut esp_audio_enc_info_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Deinitialize ADPCM encoder handle."]
    #[doc = ""]
    #[doc = " @param[in]  enc_hd    The ADPCM encoder handle."]
    pub fn esp_adpcm_enc_close(enc_hd: *mut ::std::os::raw::c_void);
}
#[doc = "< Invalid mode"]
pub const esp_amrnb_enc_bitrate_t_ESP_AMRNB_ENC_BITRATE_UNKNOW: esp_amrnb_enc_bitrate_t = -1;
#[doc = "< 4.75 Kbps"]
pub const esp_amrnb_enc_bitrate_t_ESP_AMRNB_ENC_BITRATE_MR475: esp_amrnb_enc_bitrate_t = 0;
#[doc = "< 5.15 Kbps"]
pub const esp_amrnb_enc_bitrate_t_ESP_AMRNB_ENC_BITRATE_MR515: esp_amrnb_enc_bitrate_t = 1;
#[doc = "< 5.90 Kbps"]
pub const esp_amrnb_enc_bitrate_t_ESP_AMRNB_ENC_BITRATE_MR59: esp_amrnb_enc_bitrate_t = 2;
#[doc = "< 6.70 Kbps"]
pub const esp_amrnb_enc_bitrate_t_ESP_AMRNB_ENC_BITRATE_MR67: esp_amrnb_enc_bitrate_t = 3;
#[doc = "< 7.40 Kbps"]
pub const esp_amrnb_enc_bitrate_t_ESP_AMRNB_ENC_BITRATE_MR74: esp_amrnb_enc_bitrate_t = 4;
#[doc = "< 7.95 Kbps"]
pub const esp_amrnb_enc_bitrate_t_ESP_AMRNB_ENC_BITRATE_MR795: esp_amrnb_enc_bitrate_t = 5;
#[doc = "< 10.2 Kbps"]
pub const esp_amrnb_enc_bitrate_t_ESP_AMRNB_ENC_BITRATE_MR102: esp_amrnb_enc_bitrate_t = 6;
#[doc = "< 12.2 Kbps"]
pub const esp_amrnb_enc_bitrate_t_ESP_AMRNB_ENC_BITRATE_MR122: esp_amrnb_enc_bitrate_t = 7;
#[doc = " @brief      Enum of AMRNB Encoder bitrate choose"]
pub type esp_amrnb_enc_bitrate_t = ::std::os::raw::c_int;
#[doc = " @brief      AMRNB Encoder configurations"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_amrnb_enc_config_t {
    #[doc = "< The sample rate of audio. Only supprot 8k"]
    pub sample_rate: ::std::os::raw::c_int,
    #[doc = "< The channel num of audio. Only support mono."]
    pub channel: ::std::os::raw::c_int,
    #[doc = "< The bit per sample of audio"]
    pub bit_per_sample: ::std::os::raw::c_int,
    #[doc = "< Use dtx technology or not, true to use"]
    pub dtx_enable: bool,
    #[doc = "< AMRNB Encoder bitrate choose"]
    pub bitrate_mode: esp_amrnb_enc_bitrate_t,
}
#[test]
fn bindgen_test_layout_esp_amrnb_enc_config_t() {
    assert_eq!(
        ::std::mem::size_of::<esp_amrnb_enc_config_t>(),
        20usize,
        concat!("Size of: ", stringify!(esp_amrnb_enc_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<esp_amrnb_enc_config_t>(),
        4usize,
        concat!("Alignment of ", stringify!(esp_amrnb_enc_config_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_amrnb_enc_config_t>())).sample_rate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_amrnb_enc_config_t),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_amrnb_enc_config_t>())).channel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_amrnb_enc_config_t),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_amrnb_enc_config_t>())).bit_per_sample as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_amrnb_enc_config_t),
            "::",
            stringify!(bit_per_sample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_amrnb_enc_config_t>())).dtx_enable as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_amrnb_enc_config_t),
            "::",
            stringify!(dtx_enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_amrnb_enc_config_t>())).bitrate_mode as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_amrnb_enc_config_t),
            "::",
            stringify!(bitrate_mode)
        )
    );
}
extern "C" {
    #[doc = " @brief       Create AMRNB encoder handle through encoder configuration."]
    #[doc = ""]
    #[doc = " @param[in]   cfg       AMRNB encoder configuration."]
    #[doc = " @param[in]   cfg_sz    Size of \"esp_amrnb_enc_config_t\"."]
    #[doc = " @param[out]  enc_hd    The AMRNB encoder handle. If AMRNB encoder handle allocation failed, will be set to NULL."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_FAIL: Encoder initialize failed"]
    #[doc = "       - ESP_AUDIO_ERR_MEM_LACK: Fail to allocate memory"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_amrnb_enc_open(
        cfg: *mut ::std::os::raw::c_void,
        cfg_sz: u32,
        enc_hd: *mut *mut ::std::os::raw::c_void,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief        Get the input PCM data length and recommended output buffer length needed by encoding one frame."]
    #[doc = ""]
    #[doc = " @param[in]    enc_hd      The AMRNB encoder handle."]
    #[doc = " @param[out]   in_size     The input frame size."]
    #[doc = " @param[out]   out_size    The output frame size."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_amrnb_enc_get_frame_size(
        enc_hd: *mut ::std::os::raw::c_void,
        in_size: *mut ::std::os::raw::c_int,
        out_size: *mut ::std::os::raw::c_int,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief          Encode one or multi AMRNB frame which the frame num is depended on input data length."]
    #[doc = ""]
    #[doc = " @param[in]      enc_hd      The AMRNB encoder handle."]
    #[doc = " @param[in]      in_frame    Pointer to input data frame."]
    #[doc = " @param[in/out]  out_frame   Pointer to output data frame."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_FAIL: Encode error"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_amrnb_enc_process(
        enc_hd: *mut ::std::os::raw::c_void,
        in_frame: *mut esp_audio_enc_in_frame_t,
        out_frame: *mut esp_audio_enc_out_frame_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Get AMRNB encoder information from encoder handle."]
    #[doc = ""]
    #[doc = " @param[in]  enc_hd      The AMRNB encoder handle."]
    #[doc = " @param[in]  enc_info    The AMRNB encoder information."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_amrnb_enc_get_info(
        enc_hd: *mut ::std::os::raw::c_void,
        enc_info: *mut esp_audio_enc_info_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Deinitialize AMRNB encoder handle."]
    #[doc = ""]
    #[doc = " @param[in]  enc_hd    The AMRNB encoder handle."]
    pub fn esp_amrnb_enc_close(enc_hd: *mut ::std::os::raw::c_void);
}
#[doc = "< Invalid mode"]
pub const esp_amrwb_enc_bitrate_t_ESP_AMRWB_ENC_BITRATE_MDNONE: esp_amrwb_enc_bitrate_t = -1;
#[doc = "< 6.60 Kbps"]
pub const esp_amrwb_enc_bitrate_t_ESP_AMRWB_ENC_BITRATE_MD66: esp_amrwb_enc_bitrate_t = 0;
#[doc = "< 8.85 Kbps"]
pub const esp_amrwb_enc_bitrate_t_ESP_AMRWB_ENC_BITRATE_MD885: esp_amrwb_enc_bitrate_t = 1;
#[doc = "< 12.65 Kbps"]
pub const esp_amrwb_enc_bitrate_t_ESP_AMRWB_ENC_BITRATE_MD1265: esp_amrwb_enc_bitrate_t = 2;
#[doc = "< 14.25 Kbps"]
pub const esp_amrwb_enc_bitrate_t_ESP_AMRWB_ENC_BITRATE_MD1425: esp_amrwb_enc_bitrate_t = 3;
#[doc = "< 15.85 Kbps"]
pub const esp_amrwb_enc_bitrate_t_ESP_AMRWB_ENC_BITRATE_MD1585: esp_amrwb_enc_bitrate_t = 4;
#[doc = "< 18.25 Kbps"]
pub const esp_amrwb_enc_bitrate_t_ESP_AMRWB_ENC_BITRATE_MD1825: esp_amrwb_enc_bitrate_t = 5;
#[doc = "< 19.85 Kbps"]
pub const esp_amrwb_enc_bitrate_t_ESP_AMRWB_ENC_BITRATE_MD1985: esp_amrwb_enc_bitrate_t = 6;
#[doc = "< 23.05 Kbps"]
pub const esp_amrwb_enc_bitrate_t_ESP_AMRWB_ENC_BITRATE_MD2305: esp_amrwb_enc_bitrate_t = 7;
#[doc = "< 23.85 Kbps"]
pub const esp_amrwb_enc_bitrate_t_ESP_AMRWB_ENC_BITRATE_MD2385: esp_amrwb_enc_bitrate_t = 8;
#[doc = "< Invalid mode"]
pub const esp_amrwb_enc_bitrate_t_ESP_AMRWB_ENC_BITRATE_N_MODES: esp_amrwb_enc_bitrate_t = 9;
#[doc = " @brief      Enum of AMRWB Encoder bitrate choose"]
pub type esp_amrwb_enc_bitrate_t = ::std::os::raw::c_int;
#[doc = " @brief      AMRWB Encoder configurations"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_amrwb_enc_config_t {
    #[doc = "< The sample rate of audio. Only supprot 16k."]
    pub sample_rate: ::std::os::raw::c_int,
    #[doc = "< The channel num of audio. Only support mono."]
    pub channel: ::std::os::raw::c_int,
    #[doc = "< The bit per sample of audio"]
    pub bit_per_sample: ::std::os::raw::c_int,
    #[doc = "< Use dtx technology or not, true to use"]
    pub dtx_enable: bool,
    #[doc = "< AMRWB Encoder bitrate choose"]
    pub bitrate_mode: esp_amrwb_enc_bitrate_t,
}
#[test]
fn bindgen_test_layout_esp_amrwb_enc_config_t() {
    assert_eq!(
        ::std::mem::size_of::<esp_amrwb_enc_config_t>(),
        20usize,
        concat!("Size of: ", stringify!(esp_amrwb_enc_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<esp_amrwb_enc_config_t>(),
        4usize,
        concat!("Alignment of ", stringify!(esp_amrwb_enc_config_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_amrwb_enc_config_t>())).sample_rate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_amrwb_enc_config_t),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_amrwb_enc_config_t>())).channel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_amrwb_enc_config_t),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_amrwb_enc_config_t>())).bit_per_sample as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_amrwb_enc_config_t),
            "::",
            stringify!(bit_per_sample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_amrwb_enc_config_t>())).dtx_enable as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_amrwb_enc_config_t),
            "::",
            stringify!(dtx_enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_amrwb_enc_config_t>())).bitrate_mode as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_amrwb_enc_config_t),
            "::",
            stringify!(bitrate_mode)
        )
    );
}
extern "C" {
    #[doc = " @brief       Create AMRWB encoder handle through encoder configuration."]
    #[doc = ""]
    #[doc = " @param[in]   cfg          AMRWB encoder configuration."]
    #[doc = " @param[in]   cfg_sz       Size of \"esp_amrwb_enc_config_t\"."]
    #[doc = " @param[out]  enc_hd       The AMRWB encoder handle. If AMRWB encoder handle allocation failed, will be set to NULL."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_FAIL: Encoder initialize failed"]
    #[doc = "       - ESP_AUDIO_ERR_MEM_LACK: Fail to allocate memory"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_amrwb_enc_open(
        cfg: *mut ::std::os::raw::c_void,
        cfg_sz: u32,
        out_handle: *mut *mut ::std::os::raw::c_void,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Get the input PCM data length and recommended output buffer length needed by encoding one frame."]
    #[doc = ""]
    #[doc = " @param[in]    enc_hd      The AMRWB encoder handle."]
    #[doc = " @param[out]   in_size     The input frame size."]
    #[doc = " @param[out]   out_size    The output frame size."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_amrwb_enc_get_frame_size(
        enc_hd: *mut ::std::os::raw::c_void,
        in_size: *mut ::std::os::raw::c_int,
        out_size: *mut ::std::os::raw::c_int,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief          Encode one or multi AMRWB frame which the frame num is depended on input data length."]
    #[doc = ""]
    #[doc = " @param[in]      enc_hd      The AMRWB encoder handle."]
    #[doc = " @param[in]      in_frame    Pointer to input data frame."]
    #[doc = " @param[in/out]  out_frame   Pointer to output data frame."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_FAIL: Encode error"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_amrwb_enc_process(
        enc_hd: *mut ::std::os::raw::c_void,
        in_frame: *mut esp_audio_enc_in_frame_t,
        out_frame: *mut esp_audio_enc_out_frame_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Get AMRWB encoder information from encoder handle."]
    #[doc = ""]
    #[doc = " @param[in]  enc_hd      The AMRWB encoder handle."]
    #[doc = " @param[in]  enc_info    The AMRWB encoder information."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_amrwb_enc_get_info(
        enc_hd: *mut ::std::os::raw::c_void,
        enc_info: *mut esp_audio_enc_info_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Deinitialize AMRWB encoder handle."]
    #[doc = ""]
    #[doc = " @param[in]  enc_hd    The AMRWB encoder handle."]
    pub fn esp_amrwb_enc_close(enc_hd: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = " @brief         Get audio codec version string"]
    pub fn esp_audio_codec_get_version() -> *const ::std::os::raw::c_char;
}
#[doc = " @brief     Handle for audio encoder instance."]
pub type esp_audio_enc_handle_t = *mut ::std::os::raw::c_void;
#[doc = " @brief      The structure of encoder library."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_audio_enc_t {
    #[doc = "< Type of audio encoder."]
    pub enc_type: esp_audio_type_t,
    #[doc = "< Create an encoder handle which"]
    #[doc = "according to user configuration."]
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            cfg: *mut ::std::os::raw::c_void,
            cfg_sz: u32,
            enc_hd: *mut *mut ::std::os::raw::c_void,
        ) -> esp_audio_err_t,
    >,
    #[doc = "< Get encoder information."]
    pub get_info: ::std::option::Option<
        unsafe extern "C" fn(
            enc_hd: *mut ::std::os::raw::c_void,
            enc_info: *mut esp_audio_enc_info_t,
        ) -> esp_audio_err_t,
    >,
    #[doc = "< Get in buffer and out buffer size."]
    pub get_frame_size: ::std::option::Option<
        unsafe extern "C" fn(
            enc_hd: *mut ::std::os::raw::c_void,
            in_size: *mut ::std::os::raw::c_int,
            out_size: *mut ::std::os::raw::c_int,
        ) -> esp_audio_err_t,
    >,
    pub process: ::std::option::Option<
        unsafe extern "C" fn(
            enc_hd: *mut ::std::os::raw::c_void,
            in_frame: *mut esp_audio_enc_in_frame_t,
            out_frame: *mut esp_audio_enc_out_frame_t,
        ) -> esp_audio_err_t,
    >,
    #[doc = "< Close an encoder handle."]
    pub close: ::std::option::Option<unsafe extern "C" fn(enc_hd: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_esp_audio_enc_t() {
    assert_eq!(
        ::std::mem::size_of::<esp_audio_enc_t>(),
        48usize,
        concat!("Size of: ", stringify!(esp_audio_enc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<esp_audio_enc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(esp_audio_enc_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_audio_enc_t>())).enc_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_t),
            "::",
            stringify!(enc_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_audio_enc_t>())).open as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_audio_enc_t>())).get_info as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_t),
            "::",
            stringify!(get_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_audio_enc_t>())).get_frame_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_t),
            "::",
            stringify!(get_frame_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_audio_enc_t>())).process as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_t),
            "::",
            stringify!(process)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_audio_enc_t>())).close as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_audio_enc_t),
            "::",
            stringify!(close)
        )
    );
}
extern "C" {
    #[doc = " @brief      Register encoder library."]
    #[doc = "             Eg: If user want to add AAC and ADPCM encoder, user can create an array of esp_audio_enc_t,"]
    #[doc = "                 then insert 'ESP_AAC_ENC_DEFAULT' and 'ESP_ADPCM_ENC_DEFAULT into it."]
    #[doc = ""]
    #[doc = " @param[in]  list      The audio encoder formats list."]
    #[doc = " @param[in]  list_num  The number of audio encoder formats."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_MEM_LACK: Fail to allocate memory"]
    #[doc = "       - ESP_AUDIO_ERR_ALREADY_EXIST: The encoder library is already exist, user must use 'esp_audio_enc_uninstall' to uninstall first"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_audio_enc_install(list: *mut esp_audio_enc_t, list_num: u32) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief       Create encoder handle through encoder configuration."]
    #[doc = ""]
    #[doc = " @param[in]   config   Audio encoder configuration."]
    #[doc = " @param[out]  enc_hd   The encoder handle. If encoder handle allocation failed, will be set to NULL."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_FAIL: Encoder initialize failed"]
    #[doc = "       - ESP_AUDIO_ERR_MEM_LACK: Fail to allocate memory"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_audio_enc_open(
        config: *mut esp_audio_enc_config_t,
        enc_hd: *mut esp_audio_enc_handle_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Get audio encoder information from encoder handle."]
    #[doc = ""]
    #[doc = " @param[in]  enc_hd       The encoder handle."]
    #[doc = " @param[in]  stream_info  The encoder information."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_audio_enc_get_info(
        enc_hd: esp_audio_enc_handle_t,
        enc_info: *mut esp_audio_enc_info_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief        Get the input PCM data length and recommended output buffer length needed by encoding one frame."]
    #[doc = ""]
    #[doc = " @note         As for PCM and G711 encoder, the 'in_size' and 'out_size' is one sample size."]
    #[doc = ""]
    #[doc = " @param[in]    enc_hd     The audio encoder handle."]
    #[doc = " @param[out]   in_size    The input frame size."]
    #[doc = " @param[out]   out_size   The output frame size."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_audio_enc_get_frame_size(
        enc_hd: esp_audio_enc_handle_t,
        in_size: *mut ::std::os::raw::c_int,
        out_size: *mut ::std::os::raw::c_int,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief          Encode one or multi audio frame which the frame num is depended on input data length."]
    #[doc = ""]
    #[doc = " @param[in]      enc_hd     The audio encoder handle."]
    #[doc = " @param[in]      in_frame   Pointer to input data frame."]
    #[doc = " @param[in/out]  out_frame  Pointer to output data frame."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_FAIL: Encode error"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_audio_enc_process(
        enc_hd: esp_audio_enc_handle_t,
        in_frame: *mut esp_audio_enc_in_frame_t,
        out_frame: *mut esp_audio_enc_out_frame_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Close an encoder handle."]
    #[doc = ""]
    #[doc = " @param[in]  enc_hd   The encoder handle."]
    pub fn esp_audio_enc_close(enc_hd: esp_audio_enc_handle_t);
}
extern "C" {
    #[doc = " @brief      Uninstall the inserted encoder libraries by esp_audio_enc_install."]
    pub fn esp_audio_enc_uninstall();
}
#[doc = " @brief      G711 Encoder configurations"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_g711_enc_config_t {
    #[doc = "< The sample rate of audio."]
    pub sample_rate: ::std::os::raw::c_int,
    #[doc = "< The channel num of audio."]
    pub channel: ::std::os::raw::c_int,
    #[doc = "< Support bit per sample: 16 bit"]
    pub bit_per_sample: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_esp_g711_enc_config_t() {
    assert_eq!(
        ::std::mem::size_of::<esp_g711_enc_config_t>(),
        12usize,
        concat!("Size of: ", stringify!(esp_g711_enc_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<esp_g711_enc_config_t>(),
        4usize,
        concat!("Alignment of ", stringify!(esp_g711_enc_config_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_g711_enc_config_t>())).sample_rate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_g711_enc_config_t),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_g711_enc_config_t>())).channel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_g711_enc_config_t),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_g711_enc_config_t>())).bit_per_sample as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_g711_enc_config_t),
            "::",
            stringify!(bit_per_sample)
        )
    );
}
extern "C" {
    #[doc = " @brief       Create G711 encoder handle through encoder configuration."]
    #[doc = ""]
    #[doc = " @param[in]   cfg       G711 encoder configuration."]
    #[doc = " @param[in]   cfg_sz    Size of \"esp_g711_enc_config_t\"."]
    #[doc = " @param[out]  enc_hd    The G711 encoder handle. If G711 encoder handle allocation failed, will be set to NULL."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_FAIL: Encoder initialize failed"]
    #[doc = "       - ESP_AUDIO_ERR_MEM_LACK: Fail to allocate memory"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_g711_enc_open(
        cfg: *mut ::std::os::raw::c_void,
        cfg_sz: u32,
        enc_hd: *mut *mut ::std::os::raw::c_void,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief        Get the input PCM data length and recommended output buffer length needed by encoding one frame."]
    #[doc = ""]
    #[doc = " @param[in]    enc_hd      The G711 encoder handle."]
    #[doc = " @param[out]   in_size     The input frame size which is one sample size."]
    #[doc = "                           If user want to encode more samples at once,"]
    #[doc = "                           the input length should be set as a multiple of \"in_size\"."]
    #[doc = " @param[out]   out_size    The output frame size which is one sample size."]
    #[doc = "                           If user want to encode more samples at once,"]
    #[doc = "                           the output length should be set as a multiple of 'out_size'."]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_g711_enc_get_frame_size(
        enc_hd: *mut ::std::os::raw::c_void,
        in_size: *mut ::std::os::raw::c_int,
        out_size: *mut ::std::os::raw::c_int,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief          Encode one or multi G711 a-LAW frame which the frame num is depended on input data length."]
    #[doc = ""]
    #[doc = " @param[in]      enc_hd      The G711 encoder handle."]
    #[doc = " @param[in]      in_frame    Pointer to input data frame."]
    #[doc = " @param[in/out]  out_frame   Pointer to output data frame."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_g711a_enc_process(
        enc_hd: *mut ::std::os::raw::c_void,
        in_frame: *mut esp_audio_enc_in_frame_t,
        out_frame: *mut esp_audio_enc_out_frame_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief          Encode one or multi G711 u-LAW frame which the frame num is depended on input data length."]
    #[doc = ""]
    #[doc = " @param[in]      enc_hd      The G711 encoder handle."]
    #[doc = " @param[in]      in_frame    Pointer to input data frame."]
    #[doc = " @param[in/out]  out_frame   Pointer to output data frame."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_g711u_enc_process(
        enc_hd: *mut ::std::os::raw::c_void,
        in_frame: *mut esp_audio_enc_in_frame_t,
        out_frame: *mut esp_audio_enc_out_frame_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Get G711 encoder information from encoder handle."]
    #[doc = ""]
    #[doc = " @param[in]  enc_hd      The G711 encoder handle."]
    #[doc = " @param[in]  enc_info    The G711 encoder information."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_g711_enc_get_info(
        enc_hd: *mut ::std::os::raw::c_void,
        enc_info: *mut esp_audio_enc_info_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Deinitialize G711 encoder handle."]
    #[doc = ""]
    #[doc = " @param[in]  enc_hd    The G711 encoder handle."]
    pub fn esp_g711_enc_close(enc_hd: *mut ::std::os::raw::c_void);
}
#[doc = "< Invalid mode"]
pub const esp_opus_enc_frame_duration_t_ESP_OPUS_ENC_FRAME_DURATION_ARG:
    esp_opus_enc_frame_duration_t = -1;
#[doc = "< Use 2.5 ms frames"]
pub const esp_opus_enc_frame_duration_t_ESP_OPUS_ENC_FRAME_DURATION_2_5_MS:
    esp_opus_enc_frame_duration_t = 0;
#[doc = "< Use 5 ms frames"]
pub const esp_opus_enc_frame_duration_t_ESP_OPUS_ENC_FRAME_DURATION_5_MS:
    esp_opus_enc_frame_duration_t = 1;
#[doc = "< Use 10 ms frames"]
pub const esp_opus_enc_frame_duration_t_ESP_OPUS_ENC_FRAME_DURATION_10_MS:
    esp_opus_enc_frame_duration_t = 2;
#[doc = "< Use 20 ms frames"]
pub const esp_opus_enc_frame_duration_t_ESP_OPUS_ENC_FRAME_DURATION_20_MS:
    esp_opus_enc_frame_duration_t = 3;
#[doc = "< Use 40 ms frames"]
pub const esp_opus_enc_frame_duration_t_ESP_OPUS_ENC_FRAME_DURATION_40_MS:
    esp_opus_enc_frame_duration_t = 4;
#[doc = "< Use 60 ms frames"]
pub const esp_opus_enc_frame_duration_t_ESP_OPUS_ENC_FRAME_DURATION_60_MS:
    esp_opus_enc_frame_duration_t = 5;
#[doc = " @brief      Enum of OPUS Encoder frame duration choose."]
pub type esp_opus_enc_frame_duration_t = ::std::os::raw::c_int;
#[doc = "< Invalid mode"]
pub const esp_opus_enc_application_t_ESP_OPUS_ENC_APPLICATION_ARG: esp_opus_enc_application_t = -1;
#[doc = "< Voip mode which is best for most VoIP/videoconference applications"]
#[doc = "where listening quality and intelligibility matter most."]
pub const esp_opus_enc_application_t_ESP_OPUS_ENC_APPLICATION_VOIP: esp_opus_enc_application_t = 0;
#[doc = "< Audio mode which is best for broadcast/high-fidelity application"]
#[doc = "where the decoded audio should be as close as possible to the input."]
pub const esp_opus_enc_application_t_ESP_OPUS_ENC_APPLICATION_AUDIO: esp_opus_enc_application_t = 1;
#[doc = "< LOWDELAY mode is only use when lowest-achievable latency is what matters most."]
pub const esp_opus_enc_application_t_ESP_OPUS_ENC_APPLICATION_LOWDELAY: esp_opus_enc_application_t =
    2;
#[doc = " @brief      Enum of OPUS Encoder application choose."]
pub type esp_opus_enc_application_t = ::std::os::raw::c_int;
#[doc = " @brief      OPUS Encoder configurations"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_opus_enc_config_t {
    #[doc = "< The sample rate of OPUS audio."]
    #[doc = "This must be one of 8000, 12000,"]
    #[doc = "16000, 24000, or 48000."]
    pub sample_rate: ::std::os::raw::c_int,
    #[doc = "< The numble of channels of OPUS audio."]
    #[doc = "This must be mono or dual."]
    pub channel: ::std::os::raw::c_int,
    #[doc = "< The bit per sample of OPUS audio."]
    #[doc = "This must be 16"]
    pub bit_per_sample: ::std::os::raw::c_int,
    #[doc = "< Suggest bitrate(Kbps) range on mono stream :"]
    #[doc = "| frame_duration(ms)|    2.5    |     5     |    10    |    20    |    40    |    60    |"]
    #[doc = "|   samplerate(Hz)  |           |           |          |          |          |          |"]
    #[doc = "|       8000        | 50 - 128  | 40 - 128  | 20 - 128 | 20 - 128 | 20 - 128 | 20 - 128 |"]
    #[doc = "|       12000       | 60 - 192  | 50 - 192  | 30 - 192 | 20 - 192 | 20 - 192 | 20 - 192 |"]
    #[doc = "|       16000       | 70 - 256  | 60 - 256  | 50 - 256 | 20 - 256 | 20 - 256 | 20 - 256 |"]
    #[doc = "|       24000       | 70 - 384  | 60 - 384  | 60 - 384 | 60 - 384 | 50 - 384 | 60 - 384 |"]
    #[doc = "|       48000       | 80 - 510  | 80 - 510  | 80 - 510 | 70 - 510 | 70 - 510 | 70 - 510 |"]
    #[doc = "Note : 1) This table shows the bitrate range corresponding to each samplerate and frame duration."]
    #[doc = "2) The bitrate range of dual stream is the same that of mono."]
    pub bitrate: ::std::os::raw::c_int,
    #[doc = "< The duration of one frame."]
    #[doc = "This must be 2.5, 5, 10, 20, 40 or 60 ms."]
    pub frame_duration: esp_opus_enc_frame_duration_t,
    #[doc = "< The application mode."]
    pub application_mode: esp_opus_enc_application_t,
    #[doc = "< Indicates the complexity of OPUS encoding. 0 is lowest. 10 is higest."]
    pub complexity: ::std::os::raw::c_int,
    #[doc = "< Configures the encoder's use of inband forward error correction (FEC)"]
    pub enable_fec: bool,
    #[doc = "< Configures the encoder's use of discontinuous transmission (DTX)"]
    pub enable_dtx: bool,
}
#[test]
fn bindgen_test_layout_esp_opus_enc_config_t() {
    assert_eq!(
        ::std::mem::size_of::<esp_opus_enc_config_t>(),
        32usize,
        concat!("Size of: ", stringify!(esp_opus_enc_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<esp_opus_enc_config_t>(),
        4usize,
        concat!("Alignment of ", stringify!(esp_opus_enc_config_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_opus_enc_config_t>())).sample_rate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_opus_enc_config_t),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_opus_enc_config_t>())).channel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_opus_enc_config_t),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_opus_enc_config_t>())).bit_per_sample as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_opus_enc_config_t),
            "::",
            stringify!(bit_per_sample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_opus_enc_config_t>())).bitrate as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_opus_enc_config_t),
            "::",
            stringify!(bitrate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_opus_enc_config_t>())).frame_duration as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_opus_enc_config_t),
            "::",
            stringify!(frame_duration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_opus_enc_config_t>())).application_mode as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_opus_enc_config_t),
            "::",
            stringify!(application_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_opus_enc_config_t>())).complexity as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_opus_enc_config_t),
            "::",
            stringify!(complexity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_opus_enc_config_t>())).enable_fec as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_opus_enc_config_t),
            "::",
            stringify!(enable_fec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_opus_enc_config_t>())).enable_dtx as *const _ as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_opus_enc_config_t),
            "::",
            stringify!(enable_dtx)
        )
    );
}
extern "C" {
    #[doc = " @brief       Create OPUS encoder handle through encoder configuration."]
    #[doc = ""]
    #[doc = " @param[in]   cfg      OPUS encoder configuration."]
    #[doc = " @param[in]   cfg_sz   Size of \"esp_opus_enc_config_t\"."]
    #[doc = " @param[out]  enc_hd   The OPUS encoder handle. If OPUS encoder handle allocation failed, will be set to NULL."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_FAIL: Encoder initialize failed"]
    #[doc = "       - ESP_AUDIO_ERR_MEM_LACK: Fail to allocate memory"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_opus_enc_open(
        cfg: *mut ::std::os::raw::c_void,
        cfg_sz: u32,
        enc_hd: *mut *mut ::std::os::raw::c_void,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief        Get the input PCM data length and recommended output buffer length needed by encoding one frame."]
    #[doc = ""]
    #[doc = " @param[in]    enc_hd     The OPUS encoder handle."]
    #[doc = " @param[out]   in_size    The input frame size."]
    #[doc = " @param[out]   out_size   The output frame size."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_opus_enc_get_frame_size(
        enc_hd: *mut ::std::os::raw::c_void,
        in_size: *mut ::std::os::raw::c_int,
        out_size: *mut ::std::os::raw::c_int,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief          Encode one or multi OPUS frame which the frame num is depended on input data length."]
    #[doc = ""]
    #[doc = " @param[in]      enc_hd      The OPUS encoder handle."]
    #[doc = " @param[in]      in_frame    Pointer to input data frame."]
    #[doc = " @param[in/out]  out_frame   Pointer to output data frame."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_FAIL: Encode error"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_opus_enc_process(
        enc_hd: *mut ::std::os::raw::c_void,
        in_frame: *mut esp_audio_enc_in_frame_t,
        out_frame: *mut esp_audio_enc_out_frame_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Get OPUS encoder information from encoder handle."]
    #[doc = ""]
    #[doc = " @param[in]  enc_hd      The OPUS encoder handle."]
    #[doc = " @param[in]  enc_info    The OPUS encoder information."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_opus_enc_get_info(
        enc_hd: *mut ::std::os::raw::c_void,
        enc_info: *mut esp_audio_enc_info_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Deinitialize OPUS encoder handle."]
    #[doc = ""]
    #[doc = " @param[in]  enc_hd    The OPUS encoder handle."]
    pub fn esp_opus_enc_close(enc_hd: *mut ::std::os::raw::c_void);
}
#[doc = " @brief      PCM Encoder configurations"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_pcm_enc_config_t {
    #[doc = "< The sample rate of audio."]
    pub sample_rate: ::std::os::raw::c_int,
    #[doc = "< The channel num of audio."]
    pub channel: ::std::os::raw::c_int,
    #[doc = "< The bit per sample of audio"]
    pub bit_per_sample: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_esp_pcm_enc_config_t() {
    assert_eq!(
        ::std::mem::size_of::<esp_pcm_enc_config_t>(),
        12usize,
        concat!("Size of: ", stringify!(esp_pcm_enc_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<esp_pcm_enc_config_t>(),
        4usize,
        concat!("Alignment of ", stringify!(esp_pcm_enc_config_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_pcm_enc_config_t>())).sample_rate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_pcm_enc_config_t),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<esp_pcm_enc_config_t>())).channel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_pcm_enc_config_t),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<esp_pcm_enc_config_t>())).bit_per_sample as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(esp_pcm_enc_config_t),
            "::",
            stringify!(bit_per_sample)
        )
    );
}
extern "C" {
    #[doc = " @brief       Create PCM encoder handle through encoder configuration."]
    #[doc = ""]
    #[doc = " @param[in]   cfg      PCM encoder configuration."]
    #[doc = " @param[in]   cfg_sz   Size of \"esp_pcm_enc_config_t\"."]
    #[doc = " @param[out]  enc_hd   The PCM encoder handle. If PCM encoder handle allocation failed, will be set to NULL."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_FAIL: Encoder initialize failed"]
    #[doc = "       - ESP_AUDIO_ERR_MEM_LACK: Fail to allocate memory"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_pcm_enc_open(
        cfg: *mut ::std::os::raw::c_void,
        cfg_sz: u32,
        enc_hd: *mut *mut ::std::os::raw::c_void,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Get the input PCM data length and recommended output buffer length needed by encoding one frame."]
    #[doc = ""]
    #[doc = " @param[in]    enc_hd      The PCM encoder handle."]
    #[doc = " @param[out]   in_size     The input frame size which is one sample size."]
    #[doc = "                           If user want to encode more samples at once,"]
    #[doc = "                           the input length can be set to several times"]
    #[doc = "                           of 'in_size'."]
    #[doc = " @param[out]   out_size    The output frame size which is one sample size."]
    #[doc = "                           If user want to encode more samples at once,"]
    #[doc = "                           the output length can be set to several times"]
    #[doc = "                           of 'out_size'."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_pcm_enc_get_frame_size(
        enc_hd: *mut ::std::os::raw::c_void,
        in_size: *mut ::std::os::raw::c_int,
        out_size: *mut ::std::os::raw::c_int,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief          Encode one or multi PCM frame which the frame num is depended on input data length."]
    #[doc = ""]
    #[doc = " @param[in]      enc_hd      The PCM encoder handle."]
    #[doc = " @param[in]      in_frame    Pointer to input data frame."]
    #[doc = " @param[in/out]  out_frame   Pointer to output data frame."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_pcm_enc_process(
        enc_hd: *mut ::std::os::raw::c_void,
        in_frame: *mut esp_audio_enc_in_frame_t,
        out_frame: *mut esp_audio_enc_out_frame_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Get PCM encoder information from encoder handle."]
    #[doc = ""]
    #[doc = " @param[in]  enc_hd      The PCM encoder handle."]
    #[doc = " @param[in]  enc_info    The PCM encoder information."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_AUDIO_ERR_OK: On success"]
    #[doc = "       - ESP_AUDIO_ERR_INVALID_PARAMETER: Invalid parameter"]
    pub fn esp_pcm_enc_get_info(
        enc_hd: *mut ::std::os::raw::c_void,
        enc_info: *mut esp_audio_enc_info_t,
    ) -> esp_audio_err_t;
}
extern "C" {
    #[doc = " @brief      Deinitialize PCM encoder handle."]
    #[doc = ""]
    #[doc = " @param[in]  enc_hd    The PCM encoder handle."]
    pub fn esp_pcm_enc_close(enc_hd: *mut ::std::os::raw::c_void);
}
